apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def appNames = new Properties()
appNames.load(new FileInputStream(rootProject.file("app.names")))

ext.versionMajor = 0
ext.versionMinor = 1
ext.versionPatch = 0
ext.minSdkVersion = 24

android {
    signingConfigs {
        generalSigning {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['keystorePassword']
        }
    }
    compileSdkVersion 26
    flavorDimensions "ui"
    defaultConfig {
        dimension "ui"
        applicationId "savanyuk.sevastyan.sample.avd_circle"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion 26
        versionCode generateVersionCode()
        versionName generateVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    productFlavors {
        // since these are supposed to co-exist, define suffixes for applicationId and names.
        develop {
            dimension "ui"
            // inherits from defaultConfig and can be omitted, but specified explicitly for easier reading.
            applicationIdSuffix "${name}"
            versionNameSuffix "-${dimension}:${name}"
        }
        demo {
            dimension "ui"
            versionNameSuffix "-${dimension}:${name}"
        }
        production {
            dimension "ui"
        }
    }
    buildTypes {
        debug {
            versionNameSuffix "-buildType:${name}"
            resValue("string", "app_name", appNames['debug'])
            debuggable true
            crunchPngs false
        }
        internal {
            versionNameSuffix "-buildType:${name}"
            resValue("string", "app_name", appNames['internal'])
            debuggable true
            crunchPngs false
        }
        alpha {
            versionNameSuffix "-buildType:${name}"
            debuggable false
            crunchPngs true
            minifyEnabled true // note: stack traces will be obfuscated.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            shrinkResources true
            zipAlignEnabled true
            resValue("string", "app_name", appNames['alpha'])
            signingConfig signingConfigs.generalSigning
        }
        beta {
            initWith alpha
            versionNameSuffix "-buildType:${name}"
            resValue("string", "app_name", appNames['beta'])
            signingConfig signingConfigs.generalSigning
        }
        release {
            initWith alpha
            versionNameSuffix ""
            resValue("string", "app_name", appNames['release'])
            signingConfig signingConfigs.generalSigning
        }
    }
    variantFilter { variant ->
        def ui = variant.flavors[0].name
        def buildType = variant.buildType.name
        if (ui == "develop" &&
                (buildType == "internal" || buildType == "alpha" || buildType == "beta" || buildType == "release")) {
            variant.setIgnore(true)
        }
        if (ui == "demo" &&
                (buildType == "beta" || buildType == "release")) {
            variant.setIgnore(true)
        }
    }
    sourceSets {
        main {
            java.srcDirs += "src/main/kotlin"
        }
        test {
            java.srcDirs += "src/test/kotlin"
        }
        developDebug {
            java.srcDirs += "src/developDebug/kotlin"
        }
        androidTest {
            java.srcDirs += "src/androidTest/kotlin"
        }
    }
}

private Integer generateVersionCode() {
    return ext.minSdkVersion * 1000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

private String generateVersionName() {
    return "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    /* Because RxAndroid releases are few and far between, it is recommended you also
                explicitly depend on RxJava's latest version for bug fixes and new features.
                (see https://github.com/ReactiveX/RxJava/releases for latest 2.x.x version)*/
    implementation 'io.reactivex.rxjava2:rxjava:2.1.10'
    implementation 'com.android.support:design:26.1.0'
    compile 'org.jetbrains.kotlin:kotlin-reflect:1.2.30'
}
